// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_whisper_cpp.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FWhisperBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FWhisperBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FWhisperBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int read_wav(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Float> pcmf32,
    ffi.Pointer<ffi.Size> pcmf32_length,
    int stereo,
  ) {
    return _read_wav(
      fname,
      pcmf32,
      pcmf32_length,
      stereo,
    );
  }

  late final _read_wavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Size>, ffi.Int)>>('read_wav');
  late final _read_wav = _read_wavPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Size>, int)>();

  int c_read_wav(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Float> pcmf32,
    ffi.Pointer<ffi.Size> pcmf32_len,
    ffi.Pointer<ffi.Pointer<ffi.Float>> pcmf32s,
    ffi.Pointer<ffi.Size> pcmf32s_len,
    int stereo,
  ) {
    return _c_read_wav(
      fname,
      pcmf32,
      pcmf32_len,
      pcmf32s,
      pcmf32s_len,
      stereo,
    );
  }

  late final _c_read_wavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int)>>('c_read_wav');
  late final _c_read_wav = _c_read_wavPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Float>>,
          ffi.Pointer<ffi.Size>,
          int)>();

  /// Various functions for loading a ggml whisper model.
  /// Allocate (almost) all memory needed for the model.
  /// Return NULL on failure
  ffi.Pointer<whisper_context> whisper_init_from_file_with_params(
    ffi.Pointer<ffi.Char> path_model,
    whisper_context_params params,
  ) {
    return _whisper_init_from_file_with_params(
      path_model,
      params,
    );
  }

  late final _whisper_init_from_file_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>,
              whisper_context_params)>>('whisper_init_from_file_with_params');
  late final _whisper_init_from_file_with_params =
      _whisper_init_from_file_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_with_params(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
    whisper_context_params params,
  ) {
    return _whisper_init_from_buffer_with_params(
      buffer,
      buffer_size,
      params,
    );
  }

  late final _whisper_init_from_buffer_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              whisper_context_params)>>('whisper_init_from_buffer_with_params');
  late final _whisper_init_from_buffer_with_params =
      _whisper_init_from_buffer_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, int, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_with_params(
    ffi.Pointer<whisper_model_loader> loader,
    whisper_context_params params,
  ) {
    return _whisper_init_with_params(
      loader,
      params,
    );
  }

  late final _whisper_init_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>,
              whisper_context_params)>>('whisper_init_with_params');
  late final _whisper_init_with_params =
      _whisper_init_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>, whisper_context_params)>();

  /// These are the same as the above, but the internal state of the context is not allocated automatically
  /// It is the responsibility of the caller to allocate the state using whisper_init_state() (#523)
  ffi.Pointer<whisper_context> whisper_init_from_file_with_params_no_state(
    ffi.Pointer<ffi.Char> path_model,
    whisper_context_params params,
  ) {
    return _whisper_init_from_file_with_params_no_state(
      path_model,
      params,
    );
  }

  late final _whisper_init_from_file_with_params_no_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<whisper_context> Function(
                  ffi.Pointer<ffi.Char>, whisper_context_params)>>(
      'whisper_init_from_file_with_params_no_state');
  late final _whisper_init_from_file_with_params_no_state =
      _whisper_init_from_file_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_with_params_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
    whisper_context_params params,
  ) {
    return _whisper_init_from_buffer_with_params_no_state(
      buffer,
      buffer_size,
      params,
    );
  }

  late final _whisper_init_from_buffer_with_params_no_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<whisper_context> Function(
                  ffi.Pointer<ffi.Void>, ffi.Size, whisper_context_params)>>(
      'whisper_init_from_buffer_with_params_no_state');
  late final _whisper_init_from_buffer_with_params_no_state =
      _whisper_init_from_buffer_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, int, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_with_params_no_state(
    ffi.Pointer<whisper_model_loader> loader,
    whisper_context_params params,
  ) {
    return _whisper_init_with_params_no_state(
      loader,
      params,
    );
  }

  late final _whisper_init_with_params_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>,
              whisper_context_params)>>('whisper_init_with_params_no_state');
  late final _whisper_init_with_params_no_state =
      _whisper_init_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_file(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file(
      path_model,
    );
  }

  late final _whisper_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file');
  late final _whisper_init_from_file = _whisper_init_from_filePtr.asFunction<
      ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('whisper_init_from_buffer');
  late final _whisper_init_from_buffer =
      _whisper_init_from_bufferPtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init(
      loader,
    );
  }

  late final _whisper_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init');
  late final _whisper_init = _whisper_initPtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_context> whisper_init_from_file_no_state(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file_no_state(
      path_model,
    );
  }

  late final _whisper_init_from_file_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file_no_state');
  late final _whisper_init_from_file_no_state =
      _whisper_init_from_file_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer_no_state(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_buffer_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('whisper_init_from_buffer_no_state');
  late final _whisper_init_from_buffer_no_state =
      _whisper_init_from_buffer_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init_no_state(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init_no_state(
      loader,
    );
  }

  late final _whisper_init_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init_no_state');
  late final _whisper_init_no_state = _whisper_init_no_statePtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_state> whisper_init_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_init_state(
      ctx,
    );
  }

  late final _whisper_init_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_state> Function(
              ffi.Pointer<whisper_context>)>>('whisper_init_state');
  late final _whisper_init_state = _whisper_init_statePtr.asFunction<
      ffi.Pointer<whisper_state> Function(ffi.Pointer<whisper_context>)>();

  /// Given a context, enable use of OpenVINO for encode inference.
  /// model_path: Optional path to OpenVINO encoder IR model. If set to nullptr,
  /// the path will be generated from the ggml model path that was passed
  /// in to whisper_init_from_file. For example, if 'path_model' was
  /// "/path/to/ggml-base.en.bin", then OpenVINO IR model path will be
  /// assumed to be "/path/to/ggml-base.en-encoder-openvino.xml".
  /// device: OpenVINO device to run inference on ("CPU", "GPU", etc.)
  /// cache_dir: Optional cache directory that can speed up init time, especially for
  /// GPU, by caching compiled 'blobs' there.
  /// Set to nullptr if not used.
  /// Returns 0 on success. If OpenVINO is not enabled in build, this simply returns 1.
  int whisper_ctx_init_openvino_encoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> device,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _whisper_ctx_init_openvino_encoder(
      ctx,
      model_path,
      device,
      cache_dir,
    );
  }

  late final _whisper_ctx_init_openvino_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('whisper_ctx_init_openvino_encoder');
  late final _whisper_ctx_init_openvino_encoder =
      _whisper_ctx_init_openvino_encoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Frees all allocated memory
  void whisper_free(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_free(
      ctx,
    );
  }

  late final _whisper_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_free');
  late final _whisper_free = _whisper_freePtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_free_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_free_state(
      state,
    );
  }

  late final _whisper_free_statePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_state>)>>(
      'whisper_free_state');
  late final _whisper_free_state = _whisper_free_statePtr
      .asFunction<void Function(ffi.Pointer<whisper_state>)>();

  void whisper_free_params(
    ffi.Pointer<whisper_full_params> params,
  ) {
    return _whisper_free_params(
      params,
    );
  }

  late final _whisper_free_paramsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<whisper_full_params>)>>(
      'whisper_free_params');
  late final _whisper_free_params = _whisper_free_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_full_params>)>();

  void whisper_free_context_params(
    ffi.Pointer<whisper_context_params> params,
  ) {
    return _whisper_free_context_params(
      params,
    );
  }

  late final _whisper_free_context_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<whisper_context_params>)>>(
      'whisper_free_context_params');
  late final _whisper_free_context_params = _whisper_free_context_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context_params>)>();

  /// Convert RAW PCM audio to log mel spectrogram.
  /// The resulting spectrogram is stored inside the default state of the provided whisper context.
  /// Returns 0 on success
  int whisper_pcm_to_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel');
  late final _whisper_pcm_to_mel = _whisper_pcm_to_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_with_state');
  late final _whisper_pcm_to_mel_with_state =
      _whisper_pcm_to_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  /// Convert RAW PCM audio to log mel spectrogram but applies a Phase Vocoder to speed up the audio x2.
  /// The resulting spectrogram is stored inside the default state of the provided whisper context.
  /// Returns 0 on success
  int whisper_pcm_to_mel_phase_vocoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder');
  late final _whisper_pcm_to_mel_phase_vocoder =
      _whisper_pcm_to_mel_phase_vocoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              int, int)>();

  int whisper_pcm_to_mel_phase_vocoder_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoder_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder_with_state');
  late final _whisper_pcm_to_mel_phase_vocoder_with_state =
      _whisper_pcm_to_mel_phase_vocoder_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  /// This can be used to set a custom log mel spectrogram inside the default state of the provided whisper context.
  /// Use this instead of whisper_pcm_to_mel() if you want to provide your own log mel spectrogram.
  /// n_mel must be 80
  /// Returns 0 on success
  int whisper_set_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel(
      ctx,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_set_mel');
  late final _whisper_set_mel = _whisper_set_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel_with_state(
      ctx,
      state,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_set_mel_with_state');
  late final _whisper_set_mel_with_state =
      _whisper_set_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  /// Run the Whisper encoder on the log mel spectrogram stored inside the default state in the provided whisper context.
  /// Make sure to call whisper_pcm_to_mel() or whisper_set_mel() first.
  /// offset can be used to specify the offset of the first frame in the spectrogram.
  /// Returns 0 on success
  int whisper_encode(
    ffi.Pointer<whisper_context> ctx,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode(
      ctx,
      offset,
      n_threads,
    );
  }

  late final _whisper_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_encode');
  late final _whisper_encode = _whisper_encodePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_encode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode_with_state(
      ctx,
      state,
      offset,
      n_threads,
    );
  }

  late final _whisper_encode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_encode_with_state');
  late final _whisper_encode_with_state =
      _whisper_encode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int)>();

  /// Run the Whisper decoder to obtain the logits and probabilities for the next token.
  /// Make sure to call whisper_encode() first.
  /// tokens + n_tokens is the provided context for the decoder.
  /// n_past is the number of tokens to use from previous decoder calls.
  /// Returns 0 on success
  /// TODO: add support for multiple decoders
  int whisper_decode(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode(
      ctx,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode');
  late final _whisper_decode = _whisper_decodePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_token>,
          int, int, int)>();

  int whisper_decode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode_with_state(
      ctx,
      state,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode_with_state');
  late final _whisper_decode_with_state =
      _whisper_decode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>, int, int, int)>();

  /// Convert the provided text into tokens.
  /// The tokens pointer must be large enough to hold the resulting tokens.
  /// Returns the number of tokens on success, no more than n_max_tokens
  /// Returns -1 on failure
  /// TODO: not sure if correct
  int whisper_tokenize(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<whisper_token> tokens,
    int n_max_tokens,
  ) {
    return _whisper_tokenize(
      ctx,
      text,
      tokens,
      n_max_tokens,
    );
  }

  late final _whisper_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<whisper_token>, ffi.Int)>>('whisper_tokenize');
  late final _whisper_tokenize = _whisper_tokenizePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<whisper_token>, int)>();

  /// Largest language id (i.e. number of available languages - 1)
  int whisper_lang_max_id() {
    return _whisper_lang_max_id();
  }

  late final _whisper_lang_max_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('whisper_lang_max_id');
  late final _whisper_lang_max_id =
      _whisper_lang_max_idPtr.asFunction<int Function()>();

  /// Return the id of the specified language, returns -1 if not found
  /// Examples:
  /// "de" -> 2
  /// "german" -> 2
  int whisper_lang_id(
    ffi.Pointer<ffi.Char> lang,
  ) {
    return _whisper_lang_id(
      lang,
    );
  }

  late final _whisper_lang_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'whisper_lang_id');
  late final _whisper_lang_id =
      _whisper_lang_idPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Return the short string of the specified language id (e.g. 2 -> "de"), returns nullptr if not found
  ffi.Pointer<ffi.Char> whisper_lang_str(
    int id,
  ) {
    return _whisper_lang_str(
      id,
    );
  }

  late final _whisper_lang_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str');
  late final _whisper_lang_str =
      _whisper_lang_strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Return the short string of the specified language name (e.g. 2 -> "german"), returns nullptr if not found
  ffi.Pointer<ffi.Char> whisper_lang_str_full(
    int id,
  ) {
    return _whisper_lang_str_full(
      id,
    );
  }

  late final _whisper_lang_str_fullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str_full');
  late final _whisper_lang_str_full = _whisper_lang_str_fullPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Use mel data at offset_ms to try and auto-detect the spoken language
  /// Make sure to call whisper_pcm_to_mel() or whisper_set_mel() first
  /// Returns the top language id or negative on failure
  /// If not null, fills the lang_probs array with the probabilities of all languages
  /// The array must be whisper_lang_max_id() + 1 in size
  /// ref: https://github.com/openai/whisper/blob/main/whisper/decoding.py#L18-L69
  int whisper_lang_auto_detect(
    ffi.Pointer<whisper_context> ctx,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect(
      ctx,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect');
  late final _whisper_lang_auto_detect =
      _whisper_lang_auto_detectPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, int, int,
              ffi.Pointer<ffi.Float>)>();

  int whisper_lang_auto_detect_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect_with_state(
      ctx,
      state,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detect_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect_with_state');
  late final _whisper_lang_auto_detect_with_state =
      _whisper_lang_auto_detect_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int, ffi.Pointer<ffi.Float>)>();

  int whisper_n_len(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_len(
      ctx,
    );
  }

  late final _whisper_n_lenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_len');
  late final _whisper_n_len = _whisper_n_lenPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_len_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_n_len_from_state(
      state,
    );
  }

  late final _whisper_n_len_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_n_len_from_state');
  late final _whisper_n_len_from_state = _whisper_n_len_from_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_vocab(
      ctx,
    );
  }

  late final _whisper_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_vocab');
  late final _whisper_n_vocab = _whisper_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_text_ctx');
  late final _whisper_n_text_ctx = _whisper_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_audio_ctx');
  late final _whisper_n_audio_ctx = _whisper_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_is_multilingual(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_is_multilingual(
      ctx,
    );
  }

  late final _whisper_is_multilingualPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_is_multilingual');
  late final _whisper_is_multilingual = _whisper_is_multilingualPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_vocab(
      ctx,
    );
  }

  late final _whisper_model_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_vocab');
  late final _whisper_model_n_vocab = _whisper_model_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_ctx');
  late final _whisper_model_n_audio_ctx = _whisper_model_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_state(
      ctx,
    );
  }

  late final _whisper_model_n_audio_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_state');
  late final _whisper_model_n_audio_state = _whisper_model_n_audio_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_head(
      ctx,
    );
  }

  late final _whisper_model_n_audio_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_head');
  late final _whisper_model_n_audio_head = _whisper_model_n_audio_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_layer(
      ctx,
    );
  }

  late final _whisper_model_n_audio_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_layer');
  late final _whisper_model_n_audio_layer = _whisper_model_n_audio_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_ctx');
  late final _whisper_model_n_text_ctx = _whisper_model_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_state(
      ctx,
    );
  }

  late final _whisper_model_n_text_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_state');
  late final _whisper_model_n_text_state = _whisper_model_n_text_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_head(
      ctx,
    );
  }

  late final _whisper_model_n_text_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_head');
  late final _whisper_model_n_text_head = _whisper_model_n_text_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_layer(
      ctx,
    );
  }

  late final _whisper_model_n_text_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_layer');
  late final _whisper_model_n_text_layer = _whisper_model_n_text_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_mels(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_mels(
      ctx,
    );
  }

  late final _whisper_model_n_melsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_mels');
  late final _whisper_model_n_mels = _whisper_model_n_melsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_ftype(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_ftype(
      ctx,
    );
  }

  late final _whisper_model_ftypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_ftype');
  late final _whisper_model_ftype = _whisper_model_ftypePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_type(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type(
      ctx,
    );
  }

  late final _whisper_model_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_type');
  late final _whisper_model_type = _whisper_model_typePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  /// Token logits obtained from the last call to whisper_decode()
  /// The logits for the last token are stored in the last row
  /// Rows: n_tokens
  /// Cols: n_vocab
  ffi.Pointer<ffi.Float> whisper_get_logits(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_get_logits(
      ctx,
    );
  }

  late final _whisper_get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_context>)>>('whisper_get_logits');
  late final _whisper_get_logits = _whisper_get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_get_logits_from_state(
      state,
    );
  }

  late final _whisper_get_logits_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_state>)>>('whisper_get_logits_from_state');
  late final _whisper_get_logits_from_state =
      _whisper_get_logits_from_statePtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_state>)>();

  /// Token Id -> String. Uses the vocabulary in the provided context
  ffi.Pointer<ffi.Char> whisper_token_to_str(
    ffi.Pointer<whisper_context> ctx,
    int token,
  ) {
    return _whisper_token_to_str(
      ctx,
      token,
    );
  }

  late final _whisper_token_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              whisper_token)>>('whisper_token_to_str');
  late final _whisper_token_to_str = _whisper_token_to_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_model_type_readable(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type_readable(
      ctx,
    );
  }

  late final _whisper_model_type_readablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>)>>('whisper_model_type_readable');
  late final _whisper_model_type_readable =
      _whisper_model_type_readablePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>)>();

  /// Special tokens
  int whisper_token_eot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_eot(
      ctx,
    );
  }

  late final _whisper_token_eotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_eot');
  late final _whisper_token_eot = _whisper_token_eotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_sot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_sot(
      ctx,
    );
  }

  late final _whisper_token_sotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_sot');
  late final _whisper_token_sot = _whisper_token_sotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_solm(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_solm(
      ctx,
    );
  }

  late final _whisper_token_solmPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_solm');
  late final _whisper_token_solm = _whisper_token_solmPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_prev(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_prev(
      ctx,
    );
  }

  late final _whisper_token_prevPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_prev');
  late final _whisper_token_prev = _whisper_token_prevPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_nosp(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_nosp(
      ctx,
    );
  }

  late final _whisper_token_nospPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_nosp');
  late final _whisper_token_nosp = _whisper_token_nospPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_not(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_not(
      ctx,
    );
  }

  late final _whisper_token_notPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_not');
  late final _whisper_token_not = _whisper_token_notPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_beg(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_beg(
      ctx,
    );
  }

  late final _whisper_token_begPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_beg');
  late final _whisper_token_beg = _whisper_token_begPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_lang(
    ffi.Pointer<whisper_context> ctx,
    int lang_id,
  ) {
    return _whisper_token_lang(
      ctx,
      lang_id,
    );
  }

  late final _whisper_token_langPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_token_lang');
  late final _whisper_token_lang = _whisper_token_langPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  /// Task tokens
  int whisper_token_translate(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_translate(
      ctx,
    );
  }

  late final _whisper_token_translatePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_translate');
  late final _whisper_token_translate = _whisper_token_translatePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_transcribe(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_transcribe(
      ctx,
    );
  }

  late final _whisper_token_transcribePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_transcribe');
  late final _whisper_token_transcribe = _whisper_token_transcribePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  /// Performance information from the default state.
  void whisper_print_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_print_timings(
      ctx,
    );
  }

  late final _whisper_print_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_print_timings');
  late final _whisper_print_timings = _whisper_print_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_reset_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_reset_timings(
      ctx,
    );
  }

  late final _whisper_reset_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_reset_timings');
  late final _whisper_reset_timings = _whisper_reset_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  /// Print system information
  ffi.Pointer<ffi.Char> whisper_print_system_info() {
    return _whisper_print_system_info();
  }

  late final _whisper_print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'whisper_print_system_info');
  late final _whisper_print_system_info = _whisper_print_system_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// NOTE: this function allocates memory, and it is the responsibility of the caller to free the pointer - see whisper_free_context_params & whisper_free_params()
  ffi.Pointer<whisper_context_params> whisper_context_default_params_by_ref() {
    return _whisper_context_default_params_by_ref();
  }

  late final _whisper_context_default_params_by_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<whisper_context_params> Function()>>(
      'whisper_context_default_params_by_ref');
  late final _whisper_context_default_params_by_ref =
      _whisper_context_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_context_params> Function()>();

  whisper_context_params whisper_context_default_params() {
    return _whisper_context_default_params();
  }

  late final _whisper_context_default_paramsPtr =
      _lookup<ffi.NativeFunction<whisper_context_params Function()>>(
          'whisper_context_default_params');
  late final _whisper_context_default_params =
      _whisper_context_default_paramsPtr
          .asFunction<whisper_context_params Function()>();

  ffi.Pointer<whisper_full_params> whisper_full_default_params_by_ref(
    int strategy,
  ) {
    return _whisper_full_default_params_by_ref(
      strategy,
    );
  }

  late final _whisper_full_default_params_by_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_full_params> Function(
              ffi.Int32)>>('whisper_full_default_params_by_ref');
  late final _whisper_full_default_params_by_ref =
      _whisper_full_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_full_params> Function(int)>();

  whisper_full_params whisper_full_default_params(
    int strategy,
  ) {
    return _whisper_full_default_params(
      strategy,
    );
  }

  late final _whisper_full_default_paramsPtr =
      _lookup<ffi.NativeFunction<whisper_full_params Function(ffi.Int32)>>(
          'whisper_full_default_params');
  late final _whisper_full_default_params = _whisper_full_default_paramsPtr
      .asFunction<whisper_full_params Function(int)>();

  /// Run the entire model: PCM -> log mel spectrogram -> encoder -> decoder -> text
  /// Not thread safe for same context
  /// Uses the specified decoding strategy to obtain the text.
  int whisper_full(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full(
      ctx,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, whisper_full_params,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('whisper_full');
  late final _whisper_full = _whisper_fullPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full_with_state(
      ctx,
      state,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_full_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('whisper_full_with_state');
  late final _whisper_full_with_state = _whisper_full_with_statePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
          whisper_full_params, ffi.Pointer<ffi.Float>, int)>();

  /// Split the input audio in chunks and process each chunk separately using whisper_full_with_state()
  /// Result is stored in the default state of the context
  /// Not thread safe if executed in parallel on the same context.
  /// It seems this approach can offer some speedup in some cases.
  /// However, the transcription accuracy can be worse at the beginning and end of each chunk.
  int whisper_full_parallel(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_processors,
  ) {
    return _whisper_full_parallel(
      ctx,
      params,
      samples,
      n_samples,
      n_processors,
    );
  }

  late final _whisper_full_parallelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_full_parallel');
  late final _whisper_full_parallel = _whisper_full_parallelPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int, int)>();

  /// Number of generated text segments
  /// A segment can be a few words, a sentence, or even a paragraph.
  int whisper_full_n_segments(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_n_segments(
      ctx,
    );
  }

  late final _whisper_full_n_segmentsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_n_segments');
  late final _whisper_full_n_segments = _whisper_full_n_segmentsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_n_segments_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_n_segments_from_state(
      state,
    );
  }

  late final _whisper_full_n_segments_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_n_segments_from_state');
  late final _whisper_full_n_segments_from_state =
      _whisper_full_n_segments_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  /// Language id associated with the context's default state
  int whisper_full_lang_id(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_lang_id(
      ctx,
    );
  }

  late final _whisper_full_lang_idPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_lang_id');
  late final _whisper_full_lang_id = _whisper_full_lang_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  /// Language id associated with the provided state
  int whisper_full_lang_id_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_lang_id_from_state(
      state,
    );
  }

  late final _whisper_full_lang_id_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_lang_id_from_state');
  late final _whisper_full_lang_id_from_state =
      _whisper_full_lang_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  /// Get the start and end time of the specified segment
  int whisper_full_get_segment_t0(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t0');
  late final _whisper_full_get_segment_t0 = _whisper_full_get_segment_t0Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t0_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t0_from_state');
  late final _whisper_full_get_segment_t0_from_state =
      _whisper_full_get_segment_t0_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_get_segment_t1(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t1');
  late final _whisper_full_get_segment_t1 = _whisper_full_get_segment_t1Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t1_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t1_from_state');
  late final _whisper_full_get_segment_t1_from_state =
      _whisper_full_get_segment_t1_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  /// Get whether the next segment is predicted as a speaker turn
  bool whisper_full_get_segment_speaker_turn_next(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_speaker_turn_next');
  late final _whisper_full_get_segment_speaker_turn_next =
      _whisper_full_get_segment_speaker_turn_nextPtr
          .asFunction<bool Function(ffi.Pointer<whisper_context>, int)>();

  bool whisper_full_get_segment_speaker_turn_next_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_next_from_statePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<whisper_state>, ffi.Int)>>(
          'whisper_full_get_segment_speaker_turn_next_from_state');
  late final _whisper_full_get_segment_speaker_turn_next_from_state =
      _whisper_full_get_segment_speaker_turn_next_from_statePtr
          .asFunction<bool Function(ffi.Pointer<whisper_state>, int)>();

  /// Get the text of the specified segment
  ffi.Pointer<ffi.Char> whisper_full_get_segment_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_text');
  late final _whisper_full_get_segment_text =
      _whisper_full_get_segment_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_text_from_state');
  late final _whisper_full_get_segment_text_from_state =
      _whisper_full_get_segment_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>, int)>();

  /// Get number of tokens in the specified segment
  int whisper_full_n_tokens(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_n_tokens(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_n_tokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_full_n_tokens');
  late final _whisper_full_n_tokens = _whisper_full_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_n_tokens_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_n_tokens_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_n_tokens_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_n_tokens_from_state');
  late final _whisper_full_n_tokens_from_state =
      _whisper_full_n_tokens_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  /// Get the token text of the specified token in the specified segment
  ffi.Pointer<ffi.Char> whisper_full_get_token_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text');
  late final _whisper_full_get_token_text =
      _whisper_full_get_token_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>, int, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text_from_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text_from_state(
      ctx,
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text_from_state');
  late final _whisper_full_get_token_text_from_state =
      _whisper_full_get_token_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>, int, int)>();

  int whisper_full_get_token_id(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_idPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id');
  late final _whisper_full_get_token_id = _whisper_full_get_token_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_full_get_token_id_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_id_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id_from_state');
  late final _whisper_full_get_token_id_from_state =
      _whisper_full_get_token_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int, int)>();

  /// Get token data for the specified token in the specified segment
  /// This contains probabilities, timestamps, etc.
  whisper_token_data whisper_full_get_token_data(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_dataPtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data');
  late final _whisper_full_get_token_data =
      _whisper_full_get_token_dataPtr.asFunction<
          whisper_token_data Function(
              ffi.Pointer<whisper_context>, int, int)>();

  whisper_token_data whisper_full_get_token_data_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_data_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data_from_state');
  late final _whisper_full_get_token_data_from_state =
      _whisper_full_get_token_data_from_statePtr.asFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, int, int)>();

  /// Get the probability of the specified token in the specified segment
  double whisper_full_get_token_p(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p');
  late final _whisper_full_get_token_p = _whisper_full_get_token_pPtr
      .asFunction<double Function(ffi.Pointer<whisper_context>, int, int)>();

  double whisper_full_get_token_p_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_p_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p_from_state');
  late final _whisper_full_get_token_p_from_state =
      _whisper_full_get_token_p_from_statePtr
          .asFunction<double Function(ffi.Pointer<whisper_state>, int, int)>();

  /// Temporary helpers needed for exposing ggml interface
  int whisper_bench_memcpy(
    int n_threads,
  ) {
    return _whisper_bench_memcpy(
      n_threads,
    );
  }

  late final _whisper_bench_memcpyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_memcpy');
  late final _whisper_bench_memcpy =
      _whisper_bench_memcpyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_memcpy_str(
    int n_threads,
  ) {
    return _whisper_bench_memcpy_str(
      n_threads,
    );
  }

  late final _whisper_bench_memcpy_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_memcpy_str');
  late final _whisper_bench_memcpy_str = _whisper_bench_memcpy_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_bench_ggml_mul_mat(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat');
  late final _whisper_bench_ggml_mul_mat =
      _whisper_bench_ggml_mul_matPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_ggml_mul_mat_str(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat_str(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_mat_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat_str');
  late final _whisper_bench_ggml_mul_mat_str =
      _whisper_bench_ggml_mul_mat_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Control logging output; default behavior is to print to stderr
  void whisper_log_set(
    ggml_log_callback log_callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _whisper_log_set(
      log_callback,
      user_data,
    );
  }

  late final _whisper_log_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_log_callback, ffi.Pointer<ffi.Void>)>>('whisper_log_set');
  late final _whisper_log_set = _whisper_log_setPtr
      .asFunction<void Function(ggml_log_callback, ffi.Pointer<ffi.Void>)>();
}

/// C interface
///
/// The following interface is thread-safe as long as the sample whisper_context is not used by multiple threads
/// concurrently.
///
/// Basic usage:
///
/// #include "whisper.h"
///
/// ...
///
/// whisper_context_params cparams = whisper_context_default_params();
///
/// struct whisper_context * ctx = whisper_init_from_file_with_params("/path/to/ggml-base.en.bin", cparams);
///
/// if (whisper_full(ctx, wparams, pcmf32.data(), pcmf32.size()) != 0) {
/// fprintf(stderr, "failed to process audio\n");
/// return 7;
/// }
///
/// const int n_segments = whisper_full_n_segments(ctx);
/// for (int i = 0; i < n_segments; ++i) {
/// const char * text = whisper_full_get_segment_text(ctx, i);
/// printf("%s", text);
/// }
///
/// whisper_free(ctx);
///
/// ...
///
/// This is a demonstration of the most straightforward usage of the library.
/// "pcmf32" contains the RAW audio data in 32-bit floating point format.
///
/// The interface also allows for more fine-grained control over the computation, but it requires a deeper
/// understanding of how the model works.
final class whisper_context extends ffi.Opaque {}

final class whisper_state extends ffi.Opaque {}

/// Parameters for the whisper_full() function
/// If you change the order or add new parameters, make sure to update the default values in whisper.cpp:
/// whisper_full_default_params()
final class whisper_full_params extends ffi.Struct {
  @ffi.Int32()
  external int strategy;

  @ffi.Int()
  external int n_threads;

  /// max tokens to use from past text as prompt for the decoder
  @ffi.Int()
  external int n_max_text_ctx;

  /// start offset in ms
  @ffi.Int()
  external int offset_ms;

  /// audio duration to process in ms
  @ffi.Int()
  external int duration_ms;

  @ffi.Bool()
  external bool translate;

  /// do not use past transcription (if any) as initial prompt for the decoder
  @ffi.Bool()
  external bool no_context;

  /// do not generate timestamps
  @ffi.Bool()
  external bool no_timestamps;

  /// force single segment output (useful for streaming)
  @ffi.Bool()
  external bool single_segment;

  /// print special tokens (e.g. <SOT>, <EOT>, <BEG>, etc.)
  @ffi.Bool()
  external bool print_special;

  /// print progress information
  @ffi.Bool()
  external bool print_progress;

  /// print results from within whisper.cpp (avoid it, use callback instead)
  @ffi.Bool()
  external bool print_realtime;

  /// print timestamps for each text segment when printing realtime
  @ffi.Bool()
  external bool print_timestamps;

  /// enable token-level timestamps
  @ffi.Bool()
  external bool token_timestamps;

  /// timestamp token probability threshold (~0.01)
  @ffi.Float()
  external double thold_pt;

  /// timestamp token sum probability threshold (~0.01)
  @ffi.Float()
  external double thold_ptsum;

  /// max segment length in characters
  @ffi.Int()
  external int max_len;

  /// split on word rather than on token (when used with max_len)
  @ffi.Bool()
  external bool split_on_word;

  /// max tokens per segment (0 = no limit)
  @ffi.Int()
  external int max_tokens;

  /// speed-up the audio by 2x using Phase Vocoder
  @ffi.Bool()
  external bool speed_up;

  /// enable debug_mode provides extra info (eg. Dump log_mel)
  @ffi.Bool()
  external bool debug_mode;

  /// overwrite the audio context size (0 = use default)
  @ffi.Int()
  external int audio_ctx;

  /// enable tinydiarize speaker turn detection
  @ffi.Bool()
  external bool tdrz_enable;

  /// tokens to provide to the whisper decoder as initial prompt
  /// these are prepended to any existing text context from a previous call
  external ffi.Pointer<ffi.Char> initial_prompt;

  external ffi.Pointer<whisper_token> prompt_tokens;

  @ffi.Int()
  external int prompt_n_tokens;

  /// for auto-detection, set to nullptr, "" or "auto"
  external ffi.Pointer<ffi.Char> language;

  @ffi.Bool()
  external bool detect_language;

  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/decoding.py#L89
  @ffi.Bool()
  external bool suppress_blank;

  /// ref: https://github.com/openai/whisper/blob/7858aa9c08d98f75575035ecd6481f462d66ca27/whisper/tokenizer.py#L224-L253
  @ffi.Bool()
  external bool suppress_non_speech_tokens;

  /// initial decoding temperature, ref: https://ai.stackexchange.com/a/32478
  @ffi.Float()
  external double temperature;

  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/decoding.py#L97
  @ffi.Float()
  external double max_initial_ts;

  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/transcribe.py#L267
  @ffi.Float()
  external double length_penalty;

  /// fallback parameters
  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/transcribe.py#L274-L278
  @ffi.Float()
  external double temperature_inc;

  /// similar to OpenAI's "compression_ratio_threshold"
  @ffi.Float()
  external double entropy_thold;

  @ffi.Float()
  external double logprob_thold;

  /// TODO: not implemented
  @ffi.Float()
  external double no_speech_thold;

  external UnnamedStruct1 greedy;

  external UnnamedStruct2 beam_search;

  /// called for every newly generated text segment
  external whisper_new_segment_callback new_segment_callback;

  external ffi.Pointer<ffi.Void> new_segment_callback_user_data;

  /// called on each progress update
  external whisper_progress_callback progress_callback;

  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  /// called each time before the encoder starts
  external whisper_encoder_begin_callback encoder_begin_callback;

  external ffi.Pointer<ffi.Void> encoder_begin_callback_user_data;

  /// called each time before ggml computation starts
  external ggml_abort_callback abort_callback;

  external ffi.Pointer<ffi.Void> abort_callback_user_data;

  /// called by each decoder to filter obtained logits
  external whisper_logits_filter_callback logits_filter_callback;

  external ffi.Pointer<ffi.Void> logits_filter_callback_user_data;

  external ffi.Pointer<ffi.Pointer<whisper_grammar_element>> grammar_rules;

  @ffi.Size()
  external int n_grammar_rules;

  @ffi.Size()
  external int i_start_rule;

  @ffi.Float()
  external double grammar_penalty;
}

/// Available sampling strategies
abstract class whisper_sampling_strategy {
  /// similar to OpenAI's GreedyDecoder
  static const int WHISPER_SAMPLING_GREEDY = 0;

  /// similar to OpenAI's BeamSearchDecoder
  static const int WHISPER_SAMPLING_BEAM_SEARCH = 1;
}

typedef whisper_token = ffi.Int32;

final class UnnamedStruct1 extends ffi.Struct {
  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/transcribe.py#L264
  @ffi.Int()
  external int best_of;
}

final class UnnamedStruct2 extends ffi.Struct {
  /// ref: https://github.com/openai/whisper/blob/f82bc59f5ea234d4b97fb2860842ed38519f7e65/whisper/transcribe.py#L265
  @ffi.Int()
  external int beam_size;

  /// TODO: not implemented, ref: https://arxiv.org/pdf/2204.05424.pdf
  @ffi.Float()
  external double patience;
}

/// Text segment callback
/// Called on every newly generated text segment
/// Use the whisper_full_...() functions to obtain the text segments
typedef whisper_new_segment_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int n_new,
            ffi.Pointer<ffi.Void> user_data)>>;

/// Progress callback
typedef whisper_progress_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int progress,
            ffi.Pointer<ffi.Void> user_data)>>;

/// Encoder begin callback
/// If not NULL, called before the encoder starts
/// If it returns false, the computation is aborted
typedef whisper_encoder_begin_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<ffi.Void> user_data)>>;

/// Abort callback
/// If not NULL, called before ggml computation
/// If it returns true, the computation is aborted
typedef ggml_abort_callback = ffi
    .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> data)>>;

/// Logits filter callback
/// Can be used to modify the logits before sampling
/// If not NULL, called after applying temperature to logits
typedef whisper_logits_filter_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<whisper_token_data> tokens,
            ffi.Int n_tokens,
            ffi.Pointer<ffi.Float> logits,
            ffi.Pointer<ffi.Void> user_data)>>;

final class whisper_token_data extends ffi.Struct {
  /// token id
  @whisper_token()
  external int id;

  /// forced timestamp token id
  @whisper_token()
  external int tid;

  /// probability of the token
  @ffi.Float()
  external double p;

  /// log probability of the token
  @ffi.Float()
  external double plog;

  /// probability of the timestamp token
  @ffi.Float()
  external double pt;

  /// sum of probabilities of all timestamp tokens
  @ffi.Float()
  external double ptsum;

  /// start time of the token
  @ffi.Int64()
  external int t0;

  /// end time of the token
  @ffi.Int64()
  external int t1;

  /// voice length of the token
  @ffi.Float()
  external double vlen;
}

final class whisper_grammar_element extends ffi.Struct {
  @ffi.Int32()
  external int type;

  /// Unicode code point or rule ID
  @ffi.Uint32()
  external int value;
}

/// grammar element type
abstract class whisper_gretype {
  /// end of rule definition
  static const int WHISPER_GRETYPE_END = 0;

  /// start of alternate definition for rule
  static const int WHISPER_GRETYPE_ALT = 1;

  /// non-terminal element: reference to rule
  static const int WHISPER_GRETYPE_RULE_REF = 2;

  /// terminal element: character (code point)
  static const int WHISPER_GRETYPE_CHAR = 3;

  /// inverse char(s) ([^a], [^a-b] [^abc])
  static const int WHISPER_GRETYPE_CHAR_NOT = 4;

  /// modifies a preceding WHISPER_GRETYPE_CHAR or LLAMA_GRETYPE_CHAR_ALT to
  /// be an inclusive range ([a-z])
  static const int WHISPER_GRETYPE_CHAR_RNG_UPPER = 5;

  /// modifies a preceding WHISPER_GRETYPE_CHAR or
  /// WHISPER_GRETYPE_CHAR_RNG_UPPER to add an alternate char to match ([ab], [a-zA])
  static const int WHISPER_GRETYPE_CHAR_ALT = 6;
}

final class whisper_context_params extends ffi.Struct {
  @ffi.Bool()
  external bool use_gpu;

  /// CUDA device
  @ffi.Int()
  external int gpu_device;
}

final class whisper_model_loader extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Void> output, ffi.Size read_size)>> read;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> ctx)>>
      eof;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>>
      close;
}

typedef ggml_log_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32 level, ffi.Pointer<ffi.Char> text,
            ffi.Pointer<ffi.Void> user_data)>>;

abstract class ggml_log_level {
  static const int GGML_LOG_LEVEL_ERROR = 2;
  static const int GGML_LOG_LEVEL_WARN = 3;
  static const int GGML_LOG_LEVEL_INFO = 4;
  static const int GGML_LOG_LEVEL_DEBUG = 5;
}

const int COMMON_SAMPLE_RATE = 16000;

const int MAX_PCMF32_LENGTH = 1000000;

const int WHISPER_SAMPLE_RATE = 16000;

const int WHISPER_N_FFT = 400;

const int WHISPER_HOP_LENGTH = 160;

const int WHISPER_CHUNK_SIZE = 30;
